# -*- coding: utf-8 -*-
"""Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XGAPX5OdLc9rWHFTrBABmb1DFuazmvpe
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import norm
from google.colab import files
import io
# uploaded = files.upload()
# df = pd.read_csv(io.BytesIO(uploaded["train.csv"]))
df_train = pd.read_csv("train.csv")
df_test = pd.read_csv("test.csv")
Y_train = df_train['SalePrice']

plt.scatter(x = df_train['GrLivArea'], y = df_train['SalePrice'])
plt.show()

df_train = df_train.drop(df_train[(df_train['GrLivArea']>4000) & (df_train['SalePrice']<300000)].index)
plt.scatter(x = df_train['GrLivArea'], y = df_train['SalePrice'])
plt.show()

plt.show()
sns.distplot(df_train['SalePrice'], fit = norm)
fig = plt.figure()
stats.probplot(df_train['SalePrice'], plot = plt)

Y_train = df_train['SalePrice']
df_train['SalePrice'] = np.log(df_train['SalePrice'])
sns.distplot(df_train['SalePrice'], fit = norm)
fig = plt.figure()
stats.probplot(df_train['SalePrice'], plot = plt)

corrmat = df_train.corr() #Compute pairwise correlation of columns, excluding NA/null values.
plt.subplots(figsize=(12,9))
sns.heatmap(corrmat, vmax=0.9, square=True)

ntrain = df_train.shape[0]
ntest = df_test.shape[0]
X = pd.concat((df_train, df_test), sort = False).reset_index(drop=True)
X = X.drop("SalePrice", axis = 1)
X_na = (X.isna().sum()/len(X))*100
X_na = X_na.drop(X_na[X_na == 0].index)
X_na.sort_values(ascending=False)

for col in ('PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'):
  X[col] = X[col].fillna('None')

for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):
    X[col] = X[col].fillna('None')

X["LotFrontage"] = X["LotFrontage"].transform(lambda x: x.fillna(x.median()))

for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):
  X[col] = X[col].fillna(0)

for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):
  X[col] = X[col].fillna(0)

for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):
  X[col] = X[col].fillna('None')

X["MasVnrType"] = X["MasVnrType"].fillna("None")
X["MasVnrArea"] = X["MasVnrArea"].fillna(0)
X['MSZoning'] = X['MSZoning'].fillna(X['MSZoning'].mode()[0])
X = X.drop('Utilities', axis = 1)
X["Functional"] = X["Functional"].fillna("Typ")
X['Electrical'] = X['Electrical'].fillna(X['Electrical'].mode()[0])
X['KitchenQual'] = X['KitchenQual'].fillna(X['KitchenQual'].mode()[0])
X['Exterior1st'] = X['Exterior1st'].fillna(X['Exterior1st'].mode()[0])
X['Exterior2nd'] = X['Exterior2nd'].fillna(X['Exterior2nd'].mode()[0])
X['SaleType'] = X['SaleType'].fillna(X['SaleType'].mode()[0])
X['MSSubClass'] = X['MSSubClass'].fillna("None")
X['MSZoning'] = X['MSZoning'].replace('C (all)', 'C')
X = X.drop("Id", axis = 1)
X = X.drop('Neighborhood', axis=1)

X_na = (X.isna().sum()/len(X))*100
X_na = X_na.drop(X_na[X_na == 0].index)
X_na.sort_values(ascending=False)

from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', 
        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', 
        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',
        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', 
        'YrSold', 'MoSold', 'GarageYrBlt', 'YearBuilt')
for c in cols:
    lbl = LabelEncoder() 
    lbl.fit(list(X[c].values)) 
    X[c] = lbl.transform(list(X[c].values))

X = pd.get_dummies(X)

from sklearn.linear_model import Lasso
X_train = X[:ntrain]
X_test = X[ntrain:]
model = Lasso(alpha = 0.1, max_iter = 100000)
model.fit(X_train, Y_train)
Id = df_test['Id'].values
Y_test = model.predict(X_test)
d = {
    'Id':Id,
     'SalePrice':Y_test
}
result = pd.DataFrame(data=d)
result
result.to_csv('result.csv')
files.download('result.csv')